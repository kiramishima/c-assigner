// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\interfaces\credit_service.go
//
// Generated by this command:
//
//	mockgen -source .\internal\interfaces\credit_service.go -destination .\internal\mocks\credit_service.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "kiramishima/credit_assigner/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCreditService is a mock of CreditService interface.
type MockCreditService struct {
	ctrl     *gomock.Controller
	recorder *MockCreditServiceMockRecorder
}

// MockCreditServiceMockRecorder is the mock recorder for MockCreditService.
type MockCreditServiceMockRecorder struct {
	mock *MockCreditService
}

// NewMockCreditService creates a new mock instance.
func NewMockCreditService(ctrl *gomock.Controller) *MockCreditService {
	mock := &MockCreditService{ctrl: ctrl}
	mock.recorder = &MockCreditServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreditService) EXPECT() *MockCreditServiceMockRecorder {
	return m.recorder
}

// Assign mocks base method.
func (m *MockCreditService) Assign(ctx context.Context, investment int32) (*models.Credit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assign", ctx, investment)
	ret0, _ := ret[0].(*models.Credit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Assign indicates an expected call of Assign.
func (mr *MockCreditServiceMockRecorder) Assign(ctx, investment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockCreditService)(nil).Assign), ctx, investment)
}

// Stats mocks base method.
func (m *MockCreditService) Stats(ctx context.Context) (*models.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", ctx)
	ret0, _ := ret[0].(*models.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockCreditServiceMockRecorder) Stats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockCreditService)(nil).Stats), ctx)
}
